{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,WAAW;AAC9D,KAAK;AACL;AACA;AACA;AACA;AACoB;;;;;;;UClCpB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,OAAO,KAAK,KAAK;AACpF,MAAM,+DAAW;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB,QAAQ,sBAAsB;AACtF;AACA;AACA,iDAAiD,8BAA8B;AAC/E;AACA;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,CAAC","sources":["webpack:///./js/services/services.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./js/script.js"],"sourcesContent":["const postData = async (url, data) => {\r\n    const res = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-type': 'application/json; charset=utf-8'\r\n        },\r\n        body: data,\r\n    });\r\n\r\n    return await res.json();\r\n}//функционал по общению с сервером выносим в отдельную фцию\r\n//так как fetch это ассинхронный код то его ждать никто не будет и в таком случае\r\n//возможно так что переменной res присвоится ничего так как\r\n// сервер не успел ответить и из-за этого будет ошибка\r\n//для этого мы использкуем async await \r\n//async мы ставим перед фцией и таким образом говорим джс что тут есть ассинхронный код\r\n//await мы ставим там, где нужно ждать выполнения операции \r\n//также они всегда работают по парно. То есть два сразу\r\n\r\n\r\nconst getResourse = async (url) => {\r\n    const res = await fetch(url);\r\n\r\n    if (!res.ok) {\r\n        //иключительно для этого проекта\r\n        const wrapper = `<div class=\"card\">Something went wrong...</div>`;\r\n        document.querySelector('.header').insertAdjacentHTML('afterend', wrapper);\r\n\r\n        throw new Error(`Could not fetch status: ${res.status}`);\r\n    }//ессли у нас \"не успешно\" тогда выбросит ошибку \r\n\r\n    return await res.json();\r\n}\r\n\r\nexport { postData };\r\nexport { getResourse };","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { getResourse } from \"./services/services\";\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n  const apiKey = '201d45b5535942a3bed125217232104';\r\n  /FORM/  \r\n\r\n  formSubmited();\r\n\r\n  function formSubmited() {\r\n    const form = document.querySelector('.form'),\r\n      header = document.querySelector('.header');\r\n\r\n    form.addEventListener('submit', (e) => {\r\n      //Отключаем стандартное поведение \r\n      e.preventDefault();\r\n\r\n\r\n\r\n      //Создаем обьект форм дата(руку набить) и присваиваем в сити название города\r\n      const data = new FormData(form);\r\n      const city = Object.fromEntries(data.entries()).city\r\n\r\n      //Делаем ГЭТ запрос на севрер с этм городом и получаем данные \r\n      const url = `http://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;\r\n      getResourse(url)\r\n        .then(data => {\r\n          console.log(data)\r\n          //удаляем предыдущюю\r\n          const prevCard = document.querySelector('.card');\r\n          if(prevCard) prevCard.remove()\r\n\r\n          //Создаем обложку\r\n          const cardWrapper = `\r\n                  <div class=\"card\">\r\n\r\n                  <h2 class=\"city\">${data.location.name}<span>${data.location.country}</span></h2>\r\n                  \r\n                  <div class=\"status-weather\">\r\n                      <div class=\"temperature\">${data.current.temp_c.toFixed()}<sup>°c</sup></div>\r\n                      <img class=\"weather-view\" src=\"./images/test.png\" alt=\"\">\r\n                  </div>\r\n                  \r\n                  <div class=\"state\">${data.current.condition.text}</div>\r\n          \r\n              </div>`;\r\n\r\n          //Отображаем ее на экран (выводим)\r\n          header.insertAdjacentHTML(\"afterend\", cardWrapper);\r\n        });\r\n\r\n    })\r\n  }\r\n\r\n})\r\n"],"names":[],"sourceRoot":""}